function [sequence] = BuildSegmentationSequence(inputs, ...
                                                subjectName, ...
                                                pathToWorkspace, ...
                                                pathToOutput, ...
                                                config)
%BUILDSEGMENTATIONSEQUENCE Example of a sequence builder.
%   This builder creates the typical sequence to perform the segmentation
%   of a T1w image.
%   
%   Input:
%   - inputs:           Inputs that will be copied into the workspace.
%   - pathToWorkspace:  Path to the sequence's workspace.
%   - pathToOutput:     Path to where we will output the data.
%
%   Output:
%   - sequence:  Built sequence.

%% step 1
% create a segmentation
step1Params = {};
step1Config = config.step1;
step1Params.inputVolume = sprintf('%s_T1w_brain_mul.nii.gz', subjectName);
step1Config.out = sprintf('%s_T1w_brain', subjectName);
deps1 = { step1Params.inputVolume };
segmentationOutput = sprintf('%s_seg.nii.gz', step1Config.out);
outputs1 = { sprintf('%s_seg.nii.gz', step1Config.out) };
step1 = Step(@CreateSegmentation, ...
             step1Params, ...
             deps1, ...
             step1Config, ...
             outputs1);

%% step 2
% threshold csf mask
step2Params = {};
step2Config = config.step2;
step2Params.inputVolume = segmentationOutput;
step2Params.outputVolume = sprintf('%s_T1w_csf_mask.nii.gz', subjectName);
deps2 = { step2Params.inputVolume };
outputs2 = { step2Params.outputVolume };
step2 = Step(@ThresholdImage, ...
             step2Params, ...
             deps2, ...
             step2Config, ...
             outputs2);

%% step 3
% invert csf mask
step3Params = {};
step3Config = config.step3;
step3Params.inputVolume = step2Params.outputVolume;
step3Params.outputVolume = sprintf('%s_T1w_csf_mask_inv.nii.gz', subjectName);
deps3 = { step2Params.inputVolume };
outputs3 = { step3Params.outputVolume };
step3 = Step(@InvertBinaryMask, ...
             step3Params, ...
             deps3, ...
             step3Config, ...
             outputs3);

%% step 4
step4Params = {};
step4Config = config.step4;
step4Params.inputVolume = 'T1_subcort_seg.nii.gz';
step4Params.outputVolume = 'T1_subcort_mask.nii.gz';
deps4 = { step4Params.inputVolume };
outputs4 = { step4Params.outputVolume };
step4 = Step(@Binarize, ...
             step4Params, ...
             deps4, ...
             step4Config, ...
             outputs4);


           
%% prepare the sequence
% set up steps in order
steps = { step1, ...
          step2, ...
          step3, ...
          step4 };

% these files will be copied from the workspace to the output path
outputs = { segmentationOutput, ...
            step2Params.outputVolume, ...
            step3Params.outputVolume };

sequence = Sequence(steps, ...
                    inputs, ...
                    outputs, ...
                    pathToWorkspace, ...
                    pathToOutput, ...
                    true);

end

