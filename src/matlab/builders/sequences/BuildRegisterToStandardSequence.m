function [sequence] = BuildRegisterToStandardSequence(inputs, ...
                                                      subjectName, ...
                                                      pathToWorkspace, ...
                                                      pathToOutput, ...
                                                      config)
%BUILDREGISTERTOSTANDARDSEQUENCE Example of a sequence builder.
%   This builder creates the typical sequence to perform the registration
%   of a parcellation.
%
%   Input:
%   - inputs:           Inputs that will be copied into the workspace.
%   - pathToWorkspace:  Path to the sequence's workspace.
%   - pathToOutput:     Path to where we will output the data.
%
%   Output:
%   - sequence:  Built sequence.

%% step 1
% dof 6 linear registration of the brain volume output in the previous
% pipeline
step1Config = config.step1;
step1Config.inputVolume = sprintf('%s_T1w_brain_trim.nii.gz', subjectName);
step1Config.referenceVolume = 'ch2bet.nii.gz';
step1Config.outputVolume = sprintf('%s_T1w_brain_dof6.nii.gz', subjectName);
step1Config.outputMatrix = sprintf('%s_T1w2MNI_dof6.mat', subjectName);
deps1 = { step1Config.inputVolume, step1Config.referenceVolume };
outputs1 = { step1Config.outputMatrix, step1Config.outputVolume };
step1 = Step(@PerformLinearImageRegistration, ...
             step1Config, ...
             deps1, ...
             outputs1);


%% step 2
% apply the result of step 1 dof 6 to the bias-corrected t1 input file
step2Config = config.step2;
step2Config.inputVolume = 'T1_biascorr.nii.gz';
step2Config.referenceVolume = 'ch2bet.nii.gz';
step2Config.outputVolume = sprintf('%s_T1w_dof6.nii.gz', subjectName);
step2Config.initMatrix = sprintf('%s_T1w2MNI_dof6.mat', subjectName);
deps2 = { step2Config.inputVolume, ...
          step2Config.referenceVolume, ...
          step2Config.initMatrix };
outputs2 = { step2Config.outputVolume };
step2 = Step(@PerformLinearImageRegistration, ...
             step2Config, ...
             deps2, ...
             outputs2);


%% step 3
% find inverse matrix of transformation dof 6 matrix
step3Config = config.step3;
step3Config.inputMatrix = sprintf('%s_T1w2MNI_dof6.mat', subjectName);
step3Config.outputMatrix = sprintf('%s_MNI2T1w_dof6.mat', subjectName);
deps3 = { step3Config.inputMatrix };
outputs3 = { step3Config.outputMatrix };
step3 = Step(@InvertTransformationMatrix, ...
             step3Config, ...
             deps3, ...
             outputs3);


%% step 4
% do a dof 12 linear registration of the dof 6 brain volume
step4Config = config.step4;
step4Config.inputVolume = sprintf('%s_T1w_brain_dof6.nii.gz', subjectName);
step4Config.referenceVolume = 'ch2bet.nii.gz';
step4Config.outputVolume = sprintf('%s_T1w_brain_dof12.nii.gz', subjectName);
step4Config.outputMatrix = sprintf('%s_T1w2MNI_dof12.mat', subjectName);
deps4 = { step4Config.inputVolume, step4Config.referenceVolume };
outputs4 = { step4Config.outputMatrix, step4Config.outputVolume };
step4 = Step(@PerformLinearImageRegistration, ...
             step4Config, ...
             deps4, ...
             outputs4);


%% step 5
% apply the result of step 4 dof 12 to the dof 6 t1 volume
step5Config = config.step5;
step5Config.inputVolume = sprintf('%s_T1w_dof6.nii.gz', subjectName);
step5Config.referenceVolume = 'ch2bet.nii.gz';
step5Config.outputVolume = sprintf('%s_T1w_dof12.nii.gz', subjectName);
step5Config.initMatrix = sprintf('%s_T1w2MNI_dof12.mat', subjectName);
deps5 = { step5Config.inputVolume, ...
          step5Config.referenceVolume, ...
          step5Config.initMatrix };
outputs5 = { step5Config.outputVolume };
step5 = Step(@PerformLinearImageRegistration, ...
             step5Config, ...
             deps5, ...
             outputs5);

%% step 6
% find inverse matrix of transformation dof 12 matrix
step6Config = config.step6;
step6Config.inputMatrix = sprintf('%s_T1w2MNI_dof12.mat', subjectName);
step6Config.outputMatrix = sprintf('%s_MNI2T1w_dof12.mat', subjectName);
deps6 = { step6Config.inputMatrix };
outputs6 = { step6Config.outputMatrix };
step6 = Step(@InvertTransformationMatrix, ...
             step6Config, ...
             deps6, ...
             outputs6);

%% step 7
% non-linear registration of the dof 12 t1 volume
step7Config = config.step7;
step7Config.inputImage = sprintf('%s_T1w_dof12.nii.gz', subjectName);
step7Config.referenceImage = 'ch2.nii.gz';
step7Config.outputImage = sprintf('%s_T1w_warped.nii.gz', subjectName);
step7Config.outputFieldCoefficients = sprintf('%s_T1w2MNI_warp.nii.gz', subjectName);
deps7 = { step7Config.inputImage, step7Config.referenceImage };
outputs7 = { step7Config.outputImage, step7Config.outputFieldCoefficients };
step7 = Step(@PerformNonLinearImageRegistration, ...
             step7Config, ...
             deps7, ...
             outputs7);

%% step 8
% invwarp
step8Config = config.step8;
step8Config.warpVolume = sprintf('%s_T1w2MNI_warp.nii.gz', subjectName);
step8Config.referenceVolume = sprintf('%s_T1w_dof12.nii.gz', subjectName);
step8Config.outputVolume = sprintf('%s_MNI2T1w_warp.nii.gz', subjectName);
deps8 = { step8Config.warpVolume, step8Config.referenceVolume };
outputs8 = { step8Config.outputVolume };
step8 = Step(@InvertWarp, ...
             step8Config, ...
             deps8, ...
             outputs8);


%% prepare the sequence
% set up steps in order
steps = { step1, ...
          step2, ...
          step3, ...
          step4, ...
          step5, ...
          step6, ...
          step7, ...
          step8 };

% these files will be copied from the workspace to the output path
outputs = { sprintf('%s_T1w_brain_dof6.nii.gz', subjectName)  ...
            sprintf('%s_T1w_dof6.nii.gz', subjectName)  ...
            sprintf('%s_MNI2T1w_dof6.mat', subjectName) ...
            sprintf('%s_T1w2MNI_dof6.mat', subjectName) ...
            sprintf('%s_T1w_brain_dof12.nii.gz', subjectName)  ...
            sprintf('%s_T1w_dof12.nii.gz', subjectName)  ...
            sprintf('%s_T1w2MNI_dof12.mat', subjectName) ...
            step6Config.outputMatrix ...
            step7Config.outputImage ...
            step7Config.outputFieldCoefficients ...
            step8Config.outputVolume };

sequence = Sequence(steps, ...
                    inputs, ...
                    outputs, ...
                    pathToWorkspace, ...
                    pathToOutput, ...
                    config.sequence);

end
